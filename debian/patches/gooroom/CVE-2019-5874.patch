commit 902f802b63e8291c44f25af5ce0b903ca7aec20f
Author: Alex Moshchuk <alexmos@chromium.org>
Date:   Wed Aug 21 05:28:28 2019 +0000

    Block the IE.HTTP external protocol.
    
    Similarly to "res", this was allowing JS to be launched in unprivileged
    mode on Internet Explorer.
    
    Bug: 989797
    Change-Id: Id1b940d4853ca291d66a25bfdeafd523141e88fc
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/1733510
    Reviewed-by: Ben Wells <benwells@chromium.org>
    Commit-Queue: Alex Moshchuk <alexmos@chromium.org>
    Cr-Commit-Position: refs/heads/master@{#688879}

diff --git a/chrome/browser/external_protocol/external_protocol_handler.cc b/chrome/browser/external_protocol/external_protocol_handler.cc
index e7cbd88e3742..121edae759f9 100644
--- a/chrome/browser/external_protocol/external_protocol_handler.cc
+++ b/chrome/browser/external_protocol/external_protocol_handler.cc
@@ -42,16 +42,28 @@ ExternalProtocolHandler::Delegate* g_external_protocol_handler_delegate =
     nullptr;
 
 constexpr const char* kDeniedSchemes[] = {
-    "afp", "data", "disk", "disks",
+    "afp",
+    "data",
+    "disk",
+    "disks",
     // ShellExecuting file:///C:/WINDOWS/system32/notepad.exe will simply
     // execute the file specified!  Hopefully we won't see any "file" schemes
     // because we think of file:// URLs as handled URLs, but better to be safe
     // than to let an attacker format the user's hard drive.
-    "file", "hcp", "javascript", "ms-help", "nntp", "res", "shell", "vbscript",
+    "file",
+    "hcp",
+    "ie.http",
+    "javascript",
+    "ms-help",
+    "nntp",
+    "res",
+    "shell",
+    "vbscript",
     // view-source is a special case in chrome. When it comes through an
     // iframe or a redirect, it looks like an external protocol, but we don't
     // want to shellexecute it.
-    "view-source", "vnd.ms.radio",
+    "view-source",
+    "vnd.ms.radio",
 };
 
 constexpr const char* kAllowedSchemes[] = {
diff --git a/chrome/browser/external_protocol/external_protocol_handler_unittest.cc b/chrome/browser/external_protocol/external_protocol_handler_unittest.cc
index bcce0696b9b8..a67702a1cff0 100644
--- a/chrome/browser/external_protocol/external_protocol_handler_unittest.cc
+++ b/chrome/browser/external_protocol/external_protocol_handler_unittest.cc
@@ -269,6 +269,9 @@ TEST_F(ExternalProtocolHandlerTest, TestGetBlockStateDefaultBlock) {
   EXPECT_EQ(ExternalProtocolHandler::BLOCK, block_state);
   block_state = ExternalProtocolHandler::GetBlockState("res", profile_.get());
   EXPECT_EQ(ExternalProtocolHandler::BLOCK, block_state);
+  block_state =
+      ExternalProtocolHandler::GetBlockState("ie.http", profile_.get());
+  EXPECT_EQ(ExternalProtocolHandler::BLOCK, block_state);
   EXPECT_TRUE(
       profile_->GetPrefs()->GetDictionary(prefs::kExcludedSchemes)->empty());
 }
