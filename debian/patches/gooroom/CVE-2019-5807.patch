From babb052d1823cdb7931d3e7f7d938e62cb8c0646 Mon Sep 17 00:00:00 2001
From: Jaroslav Sevcik <jarin@chromium.org>
Date: Wed, 03 Apr 2019 06:58:24 +0200
Subject: [PATCH] Merged: [turbofan] Make sure nodes are killed on replacement

Revision: 1ec7ffedc85a1868a25b758147d8acc0c398bd72

BUG=chromium:945644
LOG=N
NOTRY=true
NOPRESUBMIT=true
NOTREECHECKS=true
R=bmeurer@chromium.org

Change-Id: Icd4967f015e704ce56cc20539faf62c0e53abba2
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/1549170
Reviewed-by: Benedikt Meurer <bmeurer@chromium.org>
Cr-Commit-Position: refs/branch-heads/7.4@{#37}
Cr-Branched-From: 3e8a733af17a7812eba188dad612be503bd45c57-refs/heads/7.4.288@{#1}
Cr-Branched-From: d077f9b5ad92b23fe4366a9bdce319a71cd1a2c5-refs/heads/master@{#60039}
---

diff --git a/v8/src/compiler/typed-optimization.cc b/v8/src/compiler/typed-optimization.cc
index 9b0df88..a555d7f 100644
--- a/v8/src/compiler/typed-optimization.cc
+++ b/v8/src/compiler/typed-optimization.cc
@@ -727,7 +727,7 @@
     Node* const value =
         graph()->NewNode(simplified()->NumberAdd(), toNum_lhs, toNum_rhs);
     ReplaceWithValue(node, value);
-    return Replace(node);
+    return Replace(value);
   }
   return NoChange();
 }
@@ -796,7 +796,7 @@
         NumberOpFromSpeculativeNumberOp(simplified(), node->op()), toNum_lhs,
         toNum_rhs);
     ReplaceWithValue(node, value);
-    return Replace(node);
+    return Replace(value);
   }
   return NoChange();
 }
@@ -811,7 +811,7 @@
     Node* const value = graph()->NewNode(
         NumberOpFromSpeculativeNumberOp(simplified(), node->op()), lhs, rhs);
     ReplaceWithValue(node, value);
-    return Replace(node);
+    return Replace(value);
   }
   return NoChange();
 }
diff --git a/v8/test/mjsunit/compiler/regress-945644.js b/v8/test/mjsunit/compiler/regress-945644.js
new file mode 100644
index 0000000..2cb8839
--- /dev/null
+++ b/v8/test/mjsunit/compiler/regress-945644.js
@@ -0,0 +1,23 @@
+// Copyright 2019 the V8 project authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+// Flags: --allow-natives-syntax
+
+function f(v5,v6) {
+  const v16 = [1337,1337,-765470.5051836492];
+  let v19 = 0;
+  do {
+    const v20 = v19 + 1;
+    const v22 = Math.fround(v20);
+    v19 = v22;
+    const v23 = [v20, v22];
+    function v24() { v20; v22; }
+    const v33 = v16.indexOf(v19);
+  } while (v19 < 6);
+}
+
+f();
+Array.prototype.push(8);
+%OptimizeFunctionOnNextCall(f);
+f();
