commit 4a3482693491ac6bb3dd27d591efa3de1d1f1fcf
Author: Kent Tamura <tkent@chromium.org>
Date:   Thu Mar 14 01:44:27 2019 +0000

    Fix a crash on FileChooserImpl
    
    If a renderer process is compromised, and it calls both of
    FileChooserImpl::OpenFileChooser() and EnumerateChosenDirectory() via
    Mojo, the browser process could crash because ResetOwner() for
    the first FileChooserImpl::proxy_ instance was not called.  We
    should check nullness of proxy_ before updating it.
    
    Bug: 941008
    Change-Id: Ie0c1895ec46ce78d40594b543e49e43b420af675
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/1520509
    Reviewed-by: Avi Drissman <avi@chromium.org>
    Commit-Queue: Kent Tamura <tkent@chromium.org>
    Cr-Commit-Position: refs/heads/master@{#640580}

diff --git a/content/browser/frame_host/render_frame_host_impl.cc b/content/browser/frame_host/render_frame_host_impl.cc
index 7a9ec906919e..1e834cc44338 100644
--- a/content/browser/frame_host/render_frame_host_impl.cc
+++ b/content/browser/frame_host/render_frame_host_impl.cc
@@ -530,6 +530,10 @@ class FileChooserImpl : public blink::mojom::FileChooser,
 
   void OpenFileChooser(blink::mojom::FileChooserParamsPtr params,
                        OpenFileChooserCallback callback) override {
+    if (proxy_) {
+      std::move(callback).Run(nullptr);
+      return;
+    }
     callback_ = std::move(callback);
     auto listener = std::make_unique<ListenerProxy>(this);
     proxy_ = listener.get();
@@ -549,6 +553,10 @@ class FileChooserImpl : public blink::mojom::FileChooser,
   void EnumerateChosenDirectory(
       const base::FilePath& directory_path,
       EnumerateChosenDirectoryCallback callback) override {
+    if (proxy_) {
+      std::move(callback).Run(nullptr);
+      return;
+    }
     callback_ = std::move(callback);
     auto listener = std::make_unique<ListenerProxy>(this);
     proxy_ = listener.get();
diff --git a/content/browser/security_exploit_browsertest.cc b/content/browser/security_exploit_browsertest.cc
index 4afd0dbb6a12..2f83d4047fc8 100644
--- a/content/browser/security_exploit_browsertest.cc
+++ b/content/browser/security_exploit_browsertest.cc
@@ -33,6 +33,7 @@
 #include "content/public/browser/browser_task_traits.h"
 #include "content/public/browser/browser_thread.h"
 #include "content/public/browser/content_browser_client.h"
+#include "content/public/browser/file_select_listener.h"
 #include "content/public/browser/interstitial_page.h"
 #include "content/public/browser/interstitial_page_delegate.h"
 #include "content/public/browser/resource_context.h"
@@ -210,6 +211,43 @@ class BlobURLStoreInterceptor
   GURL target_url_;
 };
 
+// Constructs a WebContentsDelegate that mocks a file dialog.
+// Unlike content::FileChooserDelegate, this class doesn't make a response in
+// RunFileChooser(), and a user needs to call Choose().
+class DelayedFileChooserDelegate : public WebContentsDelegate {
+ public:
+  void Choose(const base::FilePath& file) {
+    auto file_info = blink::mojom::FileChooserFileInfo::NewNativeFile(
+        blink::mojom::NativeFileInfo::New(file, base::string16()));
+    std::vector<blink::mojom::FileChooserFileInfoPtr> files;
+    files.push_back(std::move(file_info));
+    listener_->FileSelected(std::move(files), base::FilePath(),
+                            blink::mojom::FileChooserParams::Mode::kOpen);
+    listener_.reset();
+  }
+
+  // WebContentsDelegate overrides
+  void RunFileChooser(RenderFrameHost* render_frame_host,
+                      std::unique_ptr<FileSelectListener> listener,
+                      const blink::mojom::FileChooserParams& params) override {
+    listener_ = std::move(listener);
+  }
+
+  void EnumerateDirectory(WebContents* web_contents,
+                          std::unique_ptr<FileSelectListener> listener,
+                          const base::FilePath& directory_path) override {
+    listener->FileSelectionCanceled();
+  }
+
+ private:
+  std::unique_ptr<FileSelectListener> listener_;
+};
+
+void FileChooserCallback(base::RunLoop* run_loop,
+                         blink::mojom::FileChooserResultPtr result) {
+  run_loop->Quit();
+}
+
 }  // namespace
 
 // The goal of these tests will be to "simulate" exploited renderer processes,
@@ -419,6 +457,36 @@ IN_PROC_BROWSER_TEST_F(SecurityExploitBrowserTest, AttemptRunFileChoosers) {
 #endif
 }
 
+// A test for crbug.com/941008.
+// Calling OpenFileChooser() and EnumerateChosenDirectory() for a single
+// FileChooser instance had a problem.
+IN_PROC_BROWSER_TEST_F(SecurityExploitBrowserTest, UnexpectedMethodsSequence) {
+  NavigateToURL(shell(), GURL("http://foo.com/simple_page.html"));
+  RenderFrameHost* compromised_renderer =
+      shell()->web_contents()->GetMainFrame();
+  auto delegate = std::make_unique<DelayedFileChooserDelegate>();
+  shell()->web_contents()->SetDelegate(delegate.get());
+
+  blink::mojom::FileChooserPtr chooser =
+      static_cast<RenderFrameHostImpl*>(compromised_renderer)
+          ->BindFileChooserForTesting();
+  base::RunLoop run_loop1;
+  base::RunLoop run_loop2;
+  chooser->OpenFileChooser(blink::mojom::FileChooserParams::New(),
+                           base::BindOnce(FileChooserCallback, &run_loop2));
+  // The following EnumerateChosenDirectory() runs the specified callback
+  // immediately regardless of the content of the first argument FilePath.
+  chooser->EnumerateChosenDirectory(
+      base::FilePath(FILE_PATH_LITERAL(":*?\"<>|")),
+      base::BindOnce(FileChooserCallback, &run_loop1));
+  run_loop1.Run();
+
+  delegate->Choose(base::FilePath(FILE_PATH_LITERAL("foo.txt")));
+  run_loop2.Run();
+
+  // The test passes if it doesn't crash.
+}
+
 class SecurityExploitTestInterstitialPage : public InterstitialPageDelegate {
  public:
   explicit SecurityExploitTestInterstitialPage(WebContents* contents) {
