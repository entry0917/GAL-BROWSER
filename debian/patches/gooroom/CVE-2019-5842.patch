commit 89afbe31dd09039cbe2ab744bd16031bba47ba3b
Author: Kent Tamura <tkent@chromium.org>
Date:   Fri May 31 14:06:34 2019 +0000

    XPath: Do not crash by a deep expression.
    
    The union defined in xpath_grammar.y should be on the stack.
    
    Bug: 961413
    Change-Id: I426ff2da51e0f3f678cb96ae97b80322e01c6b35
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/1638207
    Reviewed-by: Kentaro Hara <haraken@chromium.org>
    Commit-Queue: Kent Tamura <tkent@chromium.org>
    Cr-Commit-Position: refs/heads/master@{#665111}

diff --git a/third_party/blink/renderer/core/xml/xpath_grammar.y b/third_party/blink/renderer/core/xml/xpath_grammar.y
index 17d0b89685de..cf0208370a05 100644
--- a/third_party/blink/renderer/core/xml/xpath_grammar.y
+++ b/third_party/blink/renderer/core/xml/xpath_grammar.y
@@ -34,15 +34,14 @@
 #include "third_party/blink/renderer/core/xml/xpath_predicate.h"
 #include "third_party/blink/renderer/core/xml/xpath_step.h"
 #include "third_party/blink/renderer/core/xml/xpath_variable_reference.h"
-#include "third_party/blink/renderer/platform/wtf/allocator/partitions.h"
 
-void* YyFastMalloc(size_t size)
-{
-  return WTF::Partitions::FastMalloc(size, nullptr);
-}
-
-#define YYMALLOC YyFastMalloc
-#define YYFREE WTF::Partitions::FastFree
+// The union below must be located on the stack because it contains raw
+// pointers to Oilpan objects. crbug.com/961413
+#define YYSTACK_USE_ALLOCA 1
+// Bison's bug? YYSTACK_ALLOC is not defined if _MSC_VER.
+#if defined(_MSC_VER)
+#define YYSTACK_ALLOC _alloca
+#endif
 
 #define YYENABLE_NLS 0
 #define YYLTYPE_IS_TRIVIAL 1
diff --git a/third_party/blink/web_tests/fast/xpath/parser-crash-by-deep-expression.html b/third_party/blink/web_tests/fast/xpath/parser-crash-by-deep-expression.html
new file mode 100644
index 000000000000..658df4358507
--- /dev/null
+++ b/third_party/blink/web_tests/fast/xpath/parser-crash-by-deep-expression.html
@@ -0,0 +1,19 @@
+<!DOCTYPE html>
+<script src="../../resources/testharness.js"></script>
+<script src="../../resources/testharnessreport.js"></script>
+<script src="../../resources/gc.js"></script>
+<script>
+test(() => {
+  assert_throws(new SyntaxError(), () => {
+    // window.gc() may return a value. This test expects the resolver
+    // function returns no value.
+    document.createExpression(
+        '(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
+        '(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
+        '(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((' +
+        '(((((((((((((((((((((((((//a:a|b:b[b]|c:c)))))',
+        () => { window.gc(); });
+  });
+  // The test passes if createExpression() didn't crash.
+}, 'A deep XPath expression should not crash document.createExpression()');
+</script>
